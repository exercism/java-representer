public class PLACEHOLDER_1 {

    private final List<String> PLACEHOLDER_2;

    private final String PLACEHOLDER_3;

    PLACEHOLDER_1(String PLACEHOLDER_5) {
        String[] PLACEHOLDER_4 = PLACEHOLDER_5.split("==");
        PLACEHOLDER_2 = Arrays.stream(PLACEHOLDER_4[0].split("\\+")).map(String::new).map(String::trim).collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));
        PLACEHOLDER_3 = PLACEHOLDER_4[1].trim();
    }

    Map<PLACEHOLDER_6, Integer> PLACEHOLDER_7() throws UnsolvablePuzzleException {
        AlphameticsRecursion PLACEHOLDER_8 = new AlphameticsRecursion(PLACEHOLDER_9());
        PLACEHOLDER_8.generate();
        return PLACEHOLDER_8.get().orElseThrow(UnsolvablePuzzleException::new);
    }

    private List<PLACEHOLDER_6> PLACEHOLDER_9() {
        Set<Character> PLACEHOLDER_10 = new LinkedHashSet<>();
        PLACEHOLDER_2.forEach(PLACEHOLDER_12 -> PLACEHOLDER_10.addAll(PLACEHOLDER_11(PLACEHOLDER_12)));
        PLACEHOLDER_10.addAll(PLACEHOLDER_11(PLACEHOLDER_3));
        return new ArrayList<>(PLACEHOLDER_10);
    }

    private List<PLACEHOLDER_6> PLACEHOLDER_11(String PLACEHOLDER_11) {
        return PLACEHOLDER_11.chars().mapToObj(PLACEHOLDER_13 -> (char) PLACEHOLDER_13).collect(Collectors.toList());
    }

    private class PLACEHOLDER_14 {

        private final List<Character> PLACEHOLDER_15;

        private LinkedHashMap<Character, Integer> PLACEHOLDER_16;

        private PLACEHOLDER_14(List<Character> PLACEHOLDER_15) {
            this.PLACEHOLDER_15 = PLACEHOLDER_15;
        }

        private void PLACEHOLDER_17() {
            PLACEHOLDER_17(new LinkedHashMap<>(), 0, new boolean[10]);
        }

        private void PLACEHOLDER_17(LinkedHashMap<Character, Integer> PLACEHOLDER_20, int PLACEHOLDER_18, boolean[] PLACEHOLDER_23) {
            if (PLACEHOLDER_18 == PLACEHOLDER_15.size()) {
                if (!PLACEHOLDER_19(PLACEHOLDER_20) && PLACEHOLDER_21(PLACEHOLDER_20)) {
                    PLACEHOLDER_16 = new LinkedHashMap<>(PLACEHOLDER_20);
                }
                return;
            }
            for (int PLACEHOLDER_22 = 0; PLACEHOLDER_22 <= 9; PLACEHOLDER_22++) {
                if (PLACEHOLDER_23[PLACEHOLDER_22]) {
                    continue;
                }
                PLACEHOLDER_20.put(PLACEHOLDER_15.get(PLACEHOLDER_18), PLACEHOLDER_22);
                PLACEHOLDER_23[PLACEHOLDER_22] = true;
                PLACEHOLDER_17(PLACEHOLDER_20, PLACEHOLDER_18 + 1, PLACEHOLDER_23);
                PLACEHOLDER_23[PLACEHOLDER_22] = false;
            }
        }

        private Optional<PLACEHOLDER_24> PLACEHOLDER_25() {
            return Optional.ofNullable(PLACEHOLDER_16);
        }

        private boolean PLACEHOLDER_19(Map<Character, Integer> PLACEHOLDER_28) {
            return PLACEHOLDER_28.keySet().stream().filter(PLACEHOLDER_29 -> PLACEHOLDER_28.get(PLACEHOLDER_29) == 0).filter(PLACEHOLDER_26 -> PLACEHOLDER_3.charAt(0) == PLACEHOLDER_26 || PLACEHOLDER_2.stream().map(PLACEHOLDER_12 -> PLACEHOLDER_12.charAt(0)).anyMatch(PLACEHOLDER_27 -> PLACEHOLDER_27 == PLACEHOLDER_26)).count() == 1;
        }

        private boolean PLACEHOLDER_21(Map<Character, Integer> PLACEHOLDER_28) {
            long PLACEHOLDER_30 = PLACEHOLDER_2.stream().mapToLong(PLACEHOLDER_12 -> PLACEHOLDER_31(PLACEHOLDER_28, PLACEHOLDER_12)).sum();
            long PLACEHOLDER_32 = PLACEHOLDER_31(PLACEHOLDER_28, PLACEHOLDER_3);
            return PLACEHOLDER_30 == PLACEHOLDER_32;
        }

        private long PLACEHOLDER_31(Map<Character, Integer> PLACEHOLDER_28, String PLACEHOLDER_12) {
            StringBuilder PLACEHOLDER_33 = new StringBuilder();
            for (int PLACEHOLDER_22 = 0; PLACEHOLDER_22 < PLACEHOLDER_12.length(); PLACEHOLDER_22++) {
                int PLACEHOLDER_34 = PLACEHOLDER_28.get(PLACEHOLDER_12.charAt(PLACEHOLDER_22));
                PLACEHOLDER_33.append(PLACEHOLDER_34);
            }
            return Long.parseLong(PLACEHOLDER_33.toString());
        }
    }
}
