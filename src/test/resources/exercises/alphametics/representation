public class PLACEHOLDER_1
{

    private final List<String> PLACEHOLDER_2;

    private final String PLACEHOLDER_3;

    PLACEHOLDER_1(String PLACEHOLDER_5) 
    {
        String[] PLACEHOLDER_4 = PLACEHOLDER_5.split("==");
        PLACEHOLDER_2 = PLACEHOLDER_7.stream(PLACEHOLDER_4[0].split("\\+")).map(String::new).map(String::trim).collect(PLACEHOLDER_6.collectingAndThen(PLACEHOLDER_6.toList(), Collections::unmodifiableList));
        PLACEHOLDER_3 = PLACEHOLDER_4[1].trim();
    }

    Map<Character, Integer> PLACEHOLDER_8() throws UnsolvablePuzzleException 
    {
        AlphameticsRecursion PLACEHOLDER_9 = new AlphameticsRecursion(getDistinctCharacters());
        PLACEHOLDER_9.generate();
        return PLACEHOLDER_9.get().orElseThrow(UnsolvablePuzzleException::new);
    }

    /**
     * Returns the list of distinct characters in this alphametic puzzle.
     */
    private List<Character> PLACEHOLDER_10() 
    {
        Set<Character> PLACEHOLDER_11 = new LinkedHashSet<>();
        PLACEHOLDER_2.forEach(PLACEHOLDER_12 -> PLACEHOLDER_11.addAll(toChar(PLACEHOLDER_12)));
        PLACEHOLDER_11.addAll(toChar(PLACEHOLDER_3));
        return new ArrayList<>(PLACEHOLDER_11);
    }

    private List<Character> PLACEHOLDER_13(String PLACEHOLDER_13) 
    {
        return PLACEHOLDER_13.chars().mapToObj(PLACEHOLDER_14 -> (char) PLACEHOLDER_14).collect(PLACEHOLDER_6.toList());
    }

    private class PLACEHOLDER_15
    {

        private final List<Character> PLACEHOLDER_16;

        private LinkedHashMap<Character, Integer> PLACEHOLDER_17;

        private PLACEHOLDER_15(List<Character> PLACEHOLDER_16) 
        {
            this.PLACEHOLDER_16 = PLACEHOLDER_16;
        }

        private void PLACEHOLDER_18() 
        {
            generate(new LinkedHashMap<>(), 0, new boolean[10]);
        }

        private void PLACEHOLDER_18(LinkedHashMap<Character, Integer> PLACEHOLDER_20, int PLACEHOLDER_19, boolean[] PLACEHOLDER_22) 
        {
            if (PLACEHOLDER_19 == PLACEHOLDER_16.size()) 
            {
                if (!isLeadingDigitZero(PLACEHOLDER_20) && isSumTally(PLACEHOLDER_20)) 
                {
                    PLACEHOLDER_17 = new LinkedHashMap<>(PLACEHOLDER_20);
                }
                return;
            }
            for (int PLACEHOLDER_21 = 0; PLACEHOLDER_21 <= 9; PLACEHOLDER_21++) 
            {
                if (PLACEHOLDER_22[PLACEHOLDER_21]) 
                {
                    continue;
                }
                PLACEHOLDER_20.put(PLACEHOLDER_16.get(PLACEHOLDER_19), PLACEHOLDER_21);
                PLACEHOLDER_22[PLACEHOLDER_21] = true;
                generate(PLACEHOLDER_20, PLACEHOLDER_19 + 1, PLACEHOLDER_22);
                PLACEHOLDER_22[PLACEHOLDER_21] = false;
            }
        }

        private Optional<LinkedHashMap<Character, Integer>> PLACEHOLDER_23() 
        {
            return PLACEHOLDER_24.ofNullable(PLACEHOLDER_17);
        }

        /**
         * Returns true if the mapping letters to digits using {@code letterToDigit} will result in having zero as a
         * leading digit.
         */
        private boolean PLACEHOLDER_25(Map<Character, Integer> PLACEHOLDER_29) 
        {
            return PLACEHOLDER_29.keySet().stream().filter(PLACEHOLDER_28 -> PLACEHOLDER_29.get(PLACEHOLDER_28) == 0).filter(PLACEHOLDER_26 -> PLACEHOLDER_3.charAt(0) == PLACEHOLDER_26 || PLACEHOLDER_2.stream().map(PLACEHOLDER_12 -> PLACEHOLDER_12.charAt(0)).anyMatch(PLACEHOLDER_27 -> PLACEHOLDER_27 == PLACEHOLDER_26)).count() == 1;
        }

        /**
         * Returns true if the {@code letterToDigit} solves the alphametic puzzle.
         */
        private boolean PLACEHOLDER_30(Map<Character, Integer> PLACEHOLDER_29) 
        {
            long PLACEHOLDER_31 = PLACEHOLDER_2.stream().mapToLong(PLACEHOLDER_12 -> mapToNumber(PLACEHOLDER_29, PLACEHOLDER_12)).sum();
            long PLACEHOLDER_32 = mapToNumber(PLACEHOLDER_29, PLACEHOLDER_3);
            return PLACEHOLDER_31 == PLACEHOLDER_32;
        }

        /**
         * Returns the long value of {@code word}, mapped using {@code letterToDigit}.
         */
        private long PLACEHOLDER_33(Map<Character, Integer> PLACEHOLDER_29, String PLACEHOLDER_12) 
        {
            StringBuilder PLACEHOLDER_34 = new StringBuilder();
            for (int PLACEHOLDER_21 = 0; PLACEHOLDER_21 < PLACEHOLDER_12.length(); PLACEHOLDER_21++) 
            {
                int PLACEHOLDER_35 = PLACEHOLDER_29.get(PLACEHOLDER_12.charAt(PLACEHOLDER_21));
                PLACEHOLDER_34.append(PLACEHOLDER_35);
            }
            return PLACEHOLDER_36.parseLong(PLACEHOLDER_34.toString());
        }
    }
}
