final class PLACEHOLDER_1 {

    private static final int PLACEHOLDER_2 = 2;

    private static final String PLACEHOLDER_3 = "Bases must be at least 2.";

    private final int PLACEHOLDER_4;

    PLACEHOLDER_1(final int PLACEHOLDER_6, final int[] PLACEHOLDER_7) {
        PLACEHOLDER_5(PLACEHOLDER_6, PLACEHOLDER_7);
        this.PLACEHOLDER_4 = PLACEHOLDER_8(PLACEHOLDER_6, PLACEHOLDER_7);
    }

    int[] PLACEHOLDER_9(final int PLACEHOLDER_10) {
        if (PLACEHOLDER_10 < PLACEHOLDER_2) {
            throw new IllegalArgumentException(PLACEHOLDER_3);
        }
        final int PLACEHOLDER_11 = PLACEHOLDER_12(PLACEHOLDER_10);
        final int[] PLACEHOLDER_13 = new int[PLACEHOLDER_11 + 1];
        int PLACEHOLDER_14 = PLACEHOLDER_4;
        for (int PLACEHOLDER_16 = PLACEHOLDER_11; PLACEHOLDER_16 >= 0; PLACEHOLDER_16--) {
            final int PLACEHOLDER_15 = (int) Math.floor(PLACEHOLDER_14 / Math.pow(PLACEHOLDER_10, PLACEHOLDER_16));
            PLACEHOLDER_13[PLACEHOLDER_11 - PLACEHOLDER_16] = PLACEHOLDER_15;
            PLACEHOLDER_14 -= PLACEHOLDER_15 * Math.pow(PLACEHOLDER_10, PLACEHOLDER_16);
        }
        return PLACEHOLDER_13;
    }

    private void PLACEHOLDER_5(final int PLACEHOLDER_6, final int[] PLACEHOLDER_7) {
        if (PLACEHOLDER_6 < PLACEHOLDER_2) {
            throw new IllegalArgumentException(PLACEHOLDER_3);
        }
        if (PLACEHOLDER_7.PLACEHOLDER_17 == 0) {
            return;
        }
        if (Arrays.stream(PLACEHOLDER_7).min().getAsInt() < 0) {
            throw new IllegalArgumentException("Digits may not be negative.");
        }
        if (Arrays.stream(PLACEHOLDER_7).max().getAsInt() >= PLACEHOLDER_6) {
            throw new IllegalArgumentException("All digits must be strictly less than the base.");
        }
    }

    private int PLACEHOLDER_8(final int PLACEHOLDER_6, final int[] PLACEHOLDER_7) {
        int PLACEHOLDER_13 = 0;
        final int PLACEHOLDER_11 = PLACEHOLDER_7.PLACEHOLDER_17 - 1;
        for (int PLACEHOLDER_16 = PLACEHOLDER_11; PLACEHOLDER_16 >= 0; PLACEHOLDER_16--) {
            PLACEHOLDER_13 += PLACEHOLDER_7[PLACEHOLDER_11 - PLACEHOLDER_16] * Math.pow(PLACEHOLDER_6, PLACEHOLDER_16);
        }
        return PLACEHOLDER_13;
    }

    private int PLACEHOLDER_12(final int PLACEHOLDER_10) {
        int PLACEHOLDER_13 = 0;
        while (Math.pow(PLACEHOLDER_10, PLACEHOLDER_13 + 1) < PLACEHOLDER_4) {
            PLACEHOLDER_13 += 1;
        }
        return PLACEHOLDER_13;
    }
}
