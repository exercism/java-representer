class PLACEHOLDER_1
{

    private static final int PLACEHOLDER_2 = 5;

    private static final int PLACEHOLDER_3 = 26;

    private static final int PLACEHOLDER_4 = 97;

    private enum PLACEHOLDER_5 {

        PLACEHOLDER_6, PLACEHOLDER_7
    }

    String PLACEHOLDER_8(String PLACEHOLDER_11, int PLACEHOLDER_12, int PLACEHOLDER_13) 
    {
        return PLACEHOLDER_9(PLACEHOLDER_10(PLACEHOLDER_14, PLACEHOLDER_15, PLACEHOLDER_16, PLACEHOLDER_5.PLACEHOLDER_17));
    }

    String PLACEHOLDER_18(String PLACEHOLDER_19, int PLACEHOLDER_12, int PLACEHOLDER_13) 
    {
        return PLACEHOLDER_10(PLACEHOLDER_20, PLACEHOLDER_15, PLACEHOLDER_16, PLACEHOLDER_5.PLACEHOLDER_21);
    }

    private static int PLACEHOLDER_22(int PLACEHOLDER_12) 
    {
        int PLACEHOLDER_23 = Math.floorMod(PLACEHOLDER_12, PLACEHOLDER_3);
        for (int PLACEHOLDER_24 = 1; PLACEHOLDER_24 < PLACEHOLDER_3; PLACEHOLDER_24++) 
        {
            if (Math.floorMod(PLACEHOLDER_23 * PLACEHOLDER_24, PLACEHOLDER_3) == 1) 
            {
                return PLACEHOLDER_25;
            }
        }
        return 1;
    }

    private static String PLACEHOLDER_9(String PLACEHOLDER_27) 
    {
        List<String> PLACEHOLDER_26 = new ArrayList<>();
        for (int PLACEHOLDER_28 = 0; PLACEHOLDER_28 < PLACEHOLDER_29.length(); PLACEHOLDER_28 += PLACEHOLDER_2) 
        {
            PLACEHOLDER_26.add(PLACEHOLDER_29.substring(PLACEHOLDER_28, Math.min(PLACEHOLDER_29.length(), PLACEHOLDER_28 + PLACEHOLDER_2)));
        }
        return String.join(" ", PLACEHOLDER_26);
    }

    private static String PLACEHOLDER_10(String PLACEHOLDER_27, int PLACEHOLDER_12, int PLACEHOLDER_13, Mode PLACEHOLDER_34) 
    {
        int PLACEHOLDER_30 = PLACEHOLDER_22(PLACEHOLDER_15);
        if (PLACEHOLDER_30 == 1) 
        {
            throw new IllegalArgumentException("Error: keyA and alphabet size must be coprime.");
        }
        StringBuilder PLACEHOLDER_31 = new StringBuilder();
        PLACEHOLDER_29.chars().filter(Character::isLetterOrDigit).map(Character::toLowerCase).forEach(PLACEHOLDER_33 -> 
        {
            int PLACEHOLDER_32 = PLACEHOLDER_33 - PLACEHOLDER_4;
            if (PLACEHOLDER_32 < 0) 
            {
                PLACEHOLDER_31.appendCodePoint(PLACEHOLDER_33);
            } else 
            {
                if (PLACEHOLDER_34 == PLACEHOLDER_5.PLACEHOLDER_17) 
                {
                    PLACEHOLDER_31.appendCodePoint(PLACEHOLDER_4 + Math.floorMod(PLACEHOLDER_12 * PLACEHOLDER_32 + PLACEHOLDER_13, PLACEHOLDER_3));
                } else if (PLACEHOLDER_34 == PLACEHOLDER_5.PLACEHOLDER_21) 
                {
                    PLACEHOLDER_31.appendCodePoint(PLACEHOLDER_4 + Math.floorMod(PLACEHOLDER_30 * (PLACEHOLDER_32 - PLACEHOLDER_13), PLACEHOLDER_3));
                }
            }
        });
        return PLACEHOLDER_31.toString();
    }
}
