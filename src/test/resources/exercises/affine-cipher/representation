class PLACEHOLDER_1 {

    private static final int PLACEHOLDER_2 = 5;

    private static final int PLACEHOLDER_3 = 26;

    private static final int PLACEHOLDER_4 = 97;

    private enum PLACEHOLDER_5 {

        PLACEHOLDER_6, PLACEHOLDER_7
    }

    String PLACEHOLDER_8(String PLACEHOLDER_11, int PLACEHOLDER_12, int PLACEHOLDER_13) {
        return PLACEHOLDER_9(PLACEHOLDER_10(PLACEHOLDER_11, PLACEHOLDER_12, PLACEHOLDER_13, PLACEHOLDER_5.PLACEHOLDER_6));
    }

    String PLACEHOLDER_14(String PLACEHOLDER_15, int PLACEHOLDER_12, int PLACEHOLDER_13) {
        return PLACEHOLDER_10(PLACEHOLDER_15, PLACEHOLDER_12, PLACEHOLDER_13, PLACEHOLDER_5.PLACEHOLDER_7);
    }

    private static int PLACEHOLDER_16(int PLACEHOLDER_12) {
        int PLACEHOLDER_17 = Math.floorMod(PLACEHOLDER_12, PLACEHOLDER_3);
        for (int PLACEHOLDER_18 = 1; PLACEHOLDER_18 < PLACEHOLDER_3; PLACEHOLDER_18++) {
            if (Math.floorMod(PLACEHOLDER_17 * PLACEHOLDER_18, PLACEHOLDER_3) == 1) {
                return PLACEHOLDER_18;
            }
        }
        return 1;
    }

    private static String PLACEHOLDER_9(String PLACEHOLDER_20) {
        List<String> PLACEHOLDER_19 = new ArrayList<>();
        for (int PLACEHOLDER_21 = 0; PLACEHOLDER_21 < PLACEHOLDER_20.length(); PLACEHOLDER_21 += PLACEHOLDER_2) {
            PLACEHOLDER_19.add(PLACEHOLDER_20.substring(PLACEHOLDER_21, Math.min(PLACEHOLDER_20.length(), PLACEHOLDER_21 + PLACEHOLDER_2)));
        }
        return String.join(" ", PLACEHOLDER_19);
    }

    private static String PLACEHOLDER_10(String PLACEHOLDER_20, int PLACEHOLDER_12, int PLACEHOLDER_13, Mode PLACEHOLDER_26) {
        int PLACEHOLDER_22 = PLACEHOLDER_16(PLACEHOLDER_12);
        if (PLACEHOLDER_22 == 1) {
            throw new IllegalArgumentException("Error: keyA and alphabet size must be coprime.");
        }
        StringBuilder PLACEHOLDER_23 = new StringBuilder();
        PLACEHOLDER_20.chars().filter(Character::isLetterOrDigit).map(Character::toLowerCase).forEach(PLACEHOLDER_25 -> {
            int PLACEHOLDER_24 = PLACEHOLDER_25 - PLACEHOLDER_4;
            if (PLACEHOLDER_24 < 0) {
                PLACEHOLDER_23.appendCodePoint(PLACEHOLDER_25);
            } else {
                if (PLACEHOLDER_26 == PLACEHOLDER_5.PLACEHOLDER_6) {
                    PLACEHOLDER_23.appendCodePoint(PLACEHOLDER_4 + Math.floorMod(PLACEHOLDER_12 * PLACEHOLDER_24 + PLACEHOLDER_13, PLACEHOLDER_3));
                } else if (PLACEHOLDER_26 == PLACEHOLDER_5.PLACEHOLDER_7) {
                    PLACEHOLDER_23.appendCodePoint(PLACEHOLDER_4 + Math.floorMod(PLACEHOLDER_22 * (PLACEHOLDER_24 - PLACEHOLDER_13), PLACEHOLDER_3));
                }
            }
        });
        return PLACEHOLDER_23.toString();
    }
}
