class PLACEHOLDER_02 {
  private static final int PLACEHOLDER_08 = 5;

  private static final int PLACEHOLDER_09 = 26;

  private static final int PLACEHOLDER_10 = 97;

  private enum PLACEHOLDER_01 {
    PLACEHOLDER_11,
    PLACEHOLDER_12;
  }

  java.lang.String PLACEHOLDER_03(
      java.lang.String PLACEHOLDER_13, int PLACEHOLDER_14, int PLACEHOLDER_15) {
    return PLACEHOLDER_02.PLACEHOLDER_06(
        PLACEHOLDER_02.PLACEHOLDER_07(
            PLACEHOLDER_13,
            PLACEHOLDER_14,
            PLACEHOLDER_15,
            PLACEHOLDER_02.PLACEHOLDER_01.PLACEHOLDER_11));
  }

  java.lang.String PLACEHOLDER_04(
      java.lang.String PLACEHOLDER_16, int PLACEHOLDER_17, int PLACEHOLDER_18) {
    return PLACEHOLDER_02.PLACEHOLDER_07(
        PLACEHOLDER_16,
        PLACEHOLDER_17,
        PLACEHOLDER_18,
        PLACEHOLDER_02.PLACEHOLDER_01.PLACEHOLDER_12);
  }

  private static int PLACEHOLDER_05(int PLACEHOLDER_19) {
    int PLACEHOLDER_20 = java.lang.Math.floorMod(PLACEHOLDER_19, PLACEHOLDER_02.PLACEHOLDER_09);
    for (int PLACEHOLDER_21 = 1; PLACEHOLDER_21 < PLACEHOLDER_02.PLACEHOLDER_09; PLACEHOLDER_21++) {
      if (java.lang.Math.floorMod(PLACEHOLDER_20 * PLACEHOLDER_21, PLACEHOLDER_02.PLACEHOLDER_09)
          == 1) {
        return PLACEHOLDER_21;
      }
    }
    return 1;
  }

  private static java.lang.String PLACEHOLDER_06(java.lang.String PLACEHOLDER_22) {
    java.util.List<java.lang.String> PLACEHOLDER_23 = new java.util.ArrayList<>();
    for (int PLACEHOLDER_24 = 0;
        PLACEHOLDER_24 < PLACEHOLDER_22.length();
        PLACEHOLDER_24 += PLACEHOLDER_02.PLACEHOLDER_08) {
      PLACEHOLDER_23.add(
          PLACEHOLDER_22.substring(
              PLACEHOLDER_24,
              java.lang.Math.min(
                  PLACEHOLDER_22.length(), PLACEHOLDER_24 + PLACEHOLDER_02.PLACEHOLDER_08)));
    }
    return java.lang.String.join(" ", PLACEHOLDER_23);
  }

  private static java.lang.String PLACEHOLDER_07(
      java.lang.String PLACEHOLDER_25,
      int PLACEHOLDER_26,
      int PLACEHOLDER_27,
      PLACEHOLDER_02.PLACEHOLDER_01 PLACEHOLDER_28) {
    int PLACEHOLDER_29 = PLACEHOLDER_02.PLACEHOLDER_05(PLACEHOLDER_26);
    if (PLACEHOLDER_29 == 1) {
      throw new java.lang.IllegalArgumentException(
          "Error: keyA and alphabet size must be coprime.");
    }
    java.lang.StringBuilder PLACEHOLDER_30 = new java.lang.StringBuilder();
    PLACEHOLDER_25
        .chars()
        .filter(java.lang.Character::isLetterOrDigit)
        .map(java.lang.Character::toLowerCase)
        .forEach(
            PLACEHOLDER_31 -> {
              int PLACEHOLDER_32 = PLACEHOLDER_31 - PLACEHOLDER_02.PLACEHOLDER_10;
              if (PLACEHOLDER_32 < 0) {
                PLACEHOLDER_30.appendCodePoint(PLACEHOLDER_31);
              } else if (PLACEHOLDER_28 == PLACEHOLDER_02.PLACEHOLDER_01.PLACEHOLDER_11) {
                PLACEHOLDER_30.appendCodePoint(
                    PLACEHOLDER_02.PLACEHOLDER_10
                        + java.lang.Math.floorMod(
                            (PLACEHOLDER_26 * PLACEHOLDER_32) + PLACEHOLDER_27,
                            PLACEHOLDER_02.PLACEHOLDER_09));
              } else if (PLACEHOLDER_28 == PLACEHOLDER_02.PLACEHOLDER_01.PLACEHOLDER_12) {
                PLACEHOLDER_30.appendCodePoint(
                    PLACEHOLDER_02.PLACEHOLDER_10
                        + java.lang.Math.floorMod(
                            PLACEHOLDER_29 * (PLACEHOLDER_32 - PLACEHOLDER_27),
                            PLACEHOLDER_02.PLACEHOLDER_09));
              }
            });
    return PLACEHOLDER_30.toString();
  }
}
